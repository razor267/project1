{"version":3,"sources":["hoc/withAuthRedirect.js","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","DialogItem","path","id","className","s","dialog","onClick","e","onDialogChange","currentDialog","activeLink","src","avatar","name","Message","iOrNot","message","i","myAvatar","friend","maxLength10","maxLengthCreator","reduxForm","form","newMessage","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogId","setCurrentDialog","dialogsElements","dialogs","map","d","dialogsItems","messagesElements","m","messages","values","idDialog","idMessage","length","message_area","DialogsContainer","compose","dialogsPage","profilePage","dispatch","newMessageActionCreator","setCurrentDialogActionCreator"],"mappings":"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","file":"static/js/3.c3af5264.chunk.js","sourcesContent":["import {Redirect} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>;\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedRedirectComponent=connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1PIB1\",\"dialogsItems\":\"Dialogs_dialogsItems__2dbp-\",\"active\":\"Dialogs_active__2NCHI\",\"messages\":\"Dialogs_messages__13kr3\",\"message\":\"Dialogs_message__iztjz\",\"newMessage\":\"Dialogs_newMessage__1F6v8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__1uNOA\",\"activeLink\":\"DialogItem_activeLink__19xWz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1cV-C\",\"i\":\"Message_i__3fou2\",\"friend\":\"Message_friend__3N2cY\"};","import React from \"react\";\r\nimport s from './DialogItem.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog} onClick={(e)=>{props.onDialogChange(props.id)}}>\r\n            <NavLink to={path} className={props.currentDialog===props.id && s.activeLink}><img src={props.avatar}/>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from './Message.module.css';\r\n\r\nconst Message = (props) => {\r\n\r\n    if (props.iOrNot == true) {\r\n        return (\r\n            <div className={s.message}>\r\n                <div className={s.i}>{props.message}<img src={props.myAvatar}/></div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className={s.message}>\r\n                <div className={s.friend}><img src={props.avatar}/>{props.message}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Message;","import {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport s from \"../Dialogs.module.css\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport React from \"react\";\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddMessageForm = (props) => {\r\n\r\n    return (\r\n        <form className={s.newMessage} onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name='message_area' placeholder='Enter your message' validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send message</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let dialogId = props.currentDialog;\r\n    let currentDialog = dialogId - 1\r\n\r\n    let onDialogChange = (id) => {\r\n        props.setCurrentDialog(id);\r\n    }\r\n\r\n    let newMessage = (values) => {\r\n        let idDialog = currentDialog;\r\n        let idMessage = props.dialogs.dialogs[idDialog].dialog.length + 1\r\n        props.newMessage(idMessage, idDialog, values.message_area);\r\n    }\r\n\r\n    let dialogsElements = props.dialogs.dialogs.map(d => <DialogItem name={d.name} id={d.id} avatar={d.avatar}\r\n                                                                     key={d.id}\r\n                                                                     currentDialog={props.dialogs.currentDialog}\r\n                                                                     onDialogChange={onDialogChange}/>);\r\n\r\n    if (props.isAuth === false) return <Redirect to={'/login'}/>;\r\n\r\n\r\n    if (!dialogId) {\r\n        return (\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsItems}>\r\n                    {dialogsElements}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    let messagesElements = props.dialogs.dialogs[currentDialog].dialog.map(m => <Message\r\n        message={m.message}\r\n        iOrNot={m.iOrNot}\r\n        avatar={props.dialogs.dialogs[currentDialog].avatar}\r\n        myAvatar={props.myAvatar} key={m.id}/>);\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <AddMessageForm onSubmit={newMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {\r\n    newMessageActionCreator,\r\n    setCurrentDialogActionCreator\r\n} from \"../../redux/dialogsReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nclass DialogsContainer extends React.Component {\r\n\r\n    render() {\r\n        return <Dialogs {...this.props}/>\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: state.dialogsPage,\r\n        myAvatar: state.profilePage.myAvatar,\r\n        currentDialog: state.dialogsPage.currentDialog\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        newMessage: (idMessage, idDialog, message_area) => {\r\n            dispatch(newMessageActionCreator(idMessage, idDialog, message_area));\r\n        },\r\n        setCurrentDialog: (currentDialog) => {\r\n            dispatch(setCurrentDialogActionCreator(currentDialog));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(DialogsContainer)\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(DialogsContainer);\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n\r\n"],"sourceRoot":""}